<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Interactive Checkers</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
            margin: 0;
            flex-direction: column;
        }

        .board-container {
            width: 90vmin;
            height: 90vmin;
            max-width: 600px;
            max-height: 600px;
            position: relative;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            width: 100%;
            height: 100%;
            border: 5px solid black;
            position: relative;
        }

        .square {
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: calc(90vmin / 12);
            font-weight: bold;
            z-index: 0;
            position: relative;
        }

        .black {
            background-color: black;
            color: white;
        }

        .white {
            background-color: white;
            color: black;
        }

        .piece {
            width: 12%;
            height: 12%;
            border-radius: 50%;
            position: absolute;
            cursor: grab;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: calc(90vmin / 15);
            font-weight: bold;
            opacity: 0.8;
        }

        .red {
            background-color: red;
            color: white;
            border: 2px solid darkred;
        }

        .gray {
            background-color: gray;
            color: white;
            border: 2px solid darkgray;
        }

        .piece:active {
            cursor: grabbing;
        }

        .frozen {
            pointer-events: none;
            opacity: 0.5;
        }
    </style>
</head>
<body>
    <div class="board-container">
        <div class="board" id="board"></div>
    </div>
    
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const board = document.getElementById("board");
            const boardContainer = document.querySelector(".board-container");

            const boardSize = 8;
            // Pieces are now on white squares (1-32)
            const redPieces = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
            const grayPieces = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32];
            
            let pieces = {};
            let boardFrozen = false;
            let whiteSquares = {}; // Maps position number to actual square number in the grid

            function createBoard() {
                board.innerHTML = "";
                let whiteCounter = 1;
                
                for (let row = 0; row < boardSize; row++) {
                    for (let col = 0; col < boardSize; col++) {
                        let square = document.createElement("div");
                        let squareNumber = row * boardSize + col + 1;
                        square.classList.add("square");

                        if ((row + col) % 2 === 0) {
                            square.classList.add("black");
                            square.innerText = "";
                        } else {
                            square.classList.add("white");
                            square.innerText = whiteCounter;
                            square.dataset.position = whiteCounter;
                            whiteSquares[whiteCounter] = squareNumber;
                            whiteCounter++;
                        }

                        board.appendChild(square);
                    }
                }
            }

            function createPieces() {
                [...redPieces, ...grayPieces].forEach(num => {
                    let piece = document.createElement("div");
                    piece.classList.add("piece");
                    piece.classList.add(redPieces.includes(num) ? "red" : "gray");
                    piece.dataset.position = num;
                    pieces[num] = piece;
                    document.body.appendChild(piece);
                    positionPiece(piece, num);
                    
                    piece.addEventListener("mousedown", dragStart);
                    piece.addEventListener("dblclick", removePiece);
                });
            }

            function positionPiece(piece, position) {
                let square = document.querySelector(`[data-position="${position}"]`);
                let rect = square.getBoundingClientRect();
                let boardRect = boardContainer.getBoundingClientRect();
                let size = boardRect.width / 8;

                piece.style.width = `${size * 0.75}px`;
                piece.style.height = `${size * 0.75}px`;
                piece.style.left = `${rect.left + window.scrollX + size * 0.125}px`;
                piece.style.top = `${rect.top + window.scrollY + size * 0.125}px`;
                piece.style.position = "absolute";
            }

            function updatePiecePositions() {
                Object.values(pieces).forEach(piece => {
                    let position = piece.dataset.position;
                    positionPiece(piece, position);
                });
            }

            function removePiece(event) {
                if (boardFrozen) return;
                let piece = event.target;
                let position = piece.dataset.position;
                piece.remove();
                delete pieces[position];
            }

            let draggedPiece = null;
            let offsetX = 0, offsetY = 0;
            let initialPosition = null;

            function dragStart(event) {
                if (boardFrozen) return;
                draggedPiece = event.target;
                initialPosition = draggedPiece.dataset.position;
                offsetX = event.clientX - draggedPiece.getBoundingClientRect().left;
                offsetY = event.clientY - draggedPiece.getBoundingClientRect().top;

                document.addEventListener("mousemove", dragMove);
                document.addEventListener("mouseup", dragEnd);
            }

            function dragMove(event) {
                if (!draggedPiece || boardFrozen) return;

                draggedPiece.style.left = `${event.clientX - offsetX}px`;
                draggedPiece.style.top = `${event.clientY - offsetY}px`;
            }

            function dragEnd() {
                if (!draggedPiece || boardFrozen) return;

                let closestSquare = null;
                let minDistance = Infinity;

                document.querySelectorAll(".white").forEach(square => {
                    let rect = square.getBoundingClientRect();
                    let centerX = rect.left + rect.width / 2;
                    let centerY = rect.top + rect.height / 2;
                    let distance = Math.hypot(
                        centerX - (draggedPiece.getBoundingClientRect().left + draggedPiece.clientWidth / 2),
                        centerY - (draggedPiece.getBoundingClientRect().top + draggedPiece.clientHeight / 2)
                    );

                    if (distance < minDistance) {
                        minDistance = distance;
                        closestSquare = square;
                    }
                });

                if (closestSquare) {
                    let newPosition = closestSquare.dataset.position;
                    positionPiece(draggedPiece, newPosition);
                    draggedPiece.dataset.position = newPosition;

                    // Freeze the board and send move request
                    freezeBoard();
                    sendMoveRequest(initialPosition, newPosition);
                }

                draggedPiece = null;
                document.removeEventListener("mousemove", dragMove);
                document.removeEventListener("mouseup", dragEnd);
            }

            function freezeBoard() {
                boardFrozen = true;
                document.body.classList.add("frozen");
            }

            function unfreezeBoard() {
                boardFrozen = false;
                document.body.classList.remove("frozen");
            }

            function sendMoveRequest(from, to) {
                const url = `https://checkerswin.onrender.com/move?a=${from}&b=${to}`;
                fetch(url)
                    .then(response => {
                        console.log(`Move sent: ${from} -> ${to}`);
                        return response.text();
                    })
                    .then(data => {
                        console.log("Response received:", data);
                        
                        unfreezeBoard();
                    })
                    .catch(error => {
                        console.error("Error sending move request:", error);
                        unfreezeBoard(); 
                    });
            }

            window.addEventListener("resize", updatePiecePositions);

            createBoard();
            createPieces();
        });
    </script>

    <script>
        async function askName() {
            try {
                const question = "The Name?";
                // Replace with your actual Render API URL
                const response = await fetch(`https://checkerswin.onrender.com/ask-name?question=${encodeURIComponent(question)}`);
                const data = await response.text();
                document.getElementById('response').textContent = data;
            } catch (error) {
                document.getElementById('response').textContent = 'Error: ' + error.message;
            }
        }
    </script>
</body>
</html>
